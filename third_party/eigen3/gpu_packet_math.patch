--- a/Eigen/src/Core/arch/GPU/PacketMath.h
+++ b/Eigen/src/Core/arch/GPU/PacketMath.h
@@ -100,6 +100,7 @@
   return make_double2(from, from);
 }
 
+#if defined(EIGEN_CUDA_ARCH) || defined(EIGEN_HIP_DEVICE_COMPILE)
 namespace {
 
 EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float bitwise_and(const float& a,
@@ -211,6 +212,7 @@
 pcmp_eq<double2>(const double2& a, const double2& b) {
   return make_double2(eq_mask(a.x, b.x), eq_mask(a.y, b.y));
 }
+#endif  // EIGEN_CUDA_ARCH || defined(EIGEN_HIP_DEVICE_COMPILE)
 
 template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float4 plset<float4>(const float& a) {
   return make_float4(a, a+1, a+2, a+3);
--- a/Eigen/src/Geometry/arch/Geometry_SSE.h
+++ b/Eigen/src/Geometry/arch/Geometry_SSE.h
@@ -33,13 +33,14 @@
     Packet4f b = be.template packet<BAlignment,Packet4f>(0);
     Packet4f s1 = pmul(vec4f_swizzle1(a,1,2,0,2),vec4f_swizzle1(b,2,0,1,2));
     Packet4f s2 = pmul(vec4f_swizzle1(a,3,3,3,1),vec4f_swizzle1(b,0,1,2,1));
-    pstoret<float,Packet4f,ResAlignment>(
-              &res.x(),
-              padd(psub(pmul(a,vec4f_swizzle1(b,3,3,3,3)),
-                                    pmul(vec4f_swizzle1(a,2,0,1,0),
-                                               vec4f_swizzle1(b,1,2,0,0))),
-                         pxor(mask,padd(s1,s2))));
-    
+    pstoret<float, Packet4f, ResAlignment>(
+        &res.x(),
+        padd<Packet4f>(
+            psub<Packet4f>(pmul<Packet4f>(a, vec4f_swizzle1(b, 3, 3, 3, 3)),
+                           pmul<Packet4f>(vec4f_swizzle1(a, 2, 0, 1, 0),
+                                          vec4f_swizzle1(b, 1, 2, 0, 0))),
+            pxor<Packet4f>(mask, padd(s1, s2))));
+
     return res;
   }
 };
--- eigen-eigen-af2071407280/unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h	2018-11-13 17:10:30.000000000 +0000
+++ eigen-eigen-af2071407280-patched/unsupported/Eigen/CXX11/src/Tensor/TensorDeviceThreadPool.h	2018-11-16 17:22:21.468595201 +0000
@@ -45,8 +45,15 @@
 class Allocator {
  public:
   virtual ~Allocator() {}
-  EIGEN_DEVICE_FUNC virtual void* allocate(size_t num_bytes) const = 0;
-  EIGEN_DEVICE_FUNC virtual void deallocate(void* buffer) const = 0;
+  // HIP does not support device-side virtual functions
+#if !EIGEN_USE_HIP
+  EIGEN_DEVICE_FUNC
+#endif
+  virtual void* allocate(size_t num_bytes) const = 0;
+#if !EIGEN_USE_HIP
+  EIGEN_DEVICE_FUNC
+#endif
+  virtual void deallocate(void* buffer) const = 0;
 };
 
 // Build a thread pool device on top the an existing pool of threads.
--- eigen-eigen-af2071407280/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h	2018-11-13 17:10:30.000000000 +0000
+++ eigen-eigen-af2071407280-patched/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h	2018-11-16 17:16:27.019231880 +0000
@@ -195,6 +195,7 @@
   }
 };
 
+#if !defined(EIGEN_HIPCC)
 static const int kLeafSize = 1024;
 
 template <typename Self, typename Op>
@@ -218,7 +219,6 @@
   }
 };
 
-#if !defined(EIGEN_HIPCC) 
 template <typename Self, typename Op>
 struct InnerMostDimReducer<Self, Op, true, true> {
   static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename Self::CoeffReturnType
